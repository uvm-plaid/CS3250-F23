(* Omega *)
 
(Fun x . x x) (Fun x . x x)

(* The Y Combinator: Lazy fixed-point combinator, not useful for CatML *)

(Fun f . (Fun x . f (x x)) (Fun x . f (x x)))

(* The Z combinator: Eager fixed-point combinator for CatML *)
(Fun f . (Fun x . f (Fun v . (x x) v)) (Fun x . f (Fun v . (x x) v)))

(* Summation using Z *)
Let zcomb = (Fun f . (Fun x . f (Fun v . (x x) v)) (Fun x . f (Fun v . (x x) v))) In
Let s = (Fun summate . Fun n . If n = 0 Then 0 Else n + (summate (n - 1))) In
Let summate = (zcomb s) In
summate 5 

(* Curried version of multiplication as the iteration of addition using Z *)
Let zcomb = (Fun f . (Fun x . f (Fun v . (x x) v)) (Fun x . f (Fun v . (x x) v))) In
Let m = (Fun mult . Fun x . Fun y . If y = 0 Then 0 Else x + ((mult x) (y - 1))) In
Let mult = (zcomb m) In
(mult 6) 9 + (mult 3) 2 

(* Uncurried Version of multiplication *)
Let zcomb = (Fun f . (Fun x . f (Fun v . (x x) v)) (Fun x . f (Fun v . (x x) v))) In
Let m = (Fun mult . Fun x . If Snd(x) = 0 Then 0 Else Fst(x) + (mult (Fst(x), Snd(x) - 1))) In
Let mult = (zcomb m) In
(mult (6, 9)) + (mult (3, 2))

(* Curried version of multiplication using Fix *)
Let mult = (Fix mult . x . (Fun y . If y = 0 Then 0 Else x + ((mult x) (y - 1)))) In
(mult 6) 9 + (mult 3) 2 

(* Factorial using Z *)
Let zcomb = (Fun f . (Fun x . f (Fun v . (x x) v)) (Fun x . f (Fun v . (x x) v))) In
Let mult = zcomb (Fun mult . Fun x . Fun y . If y = 0 Then 0 Else x + ((mult x) (y - 1))) In
Let f = (Fun fact . Fun n . If n = 0 Then 1 Else (mult n) (fact (n - 1))) In 
Let fact = (zcomb f) In
fact 6

(* Summation using primitive Fix *)
Let summate = (Fix summate . n . If n = 0 Then 0 Else (n + summate (n-1))) In 
summate 6

(* Naive fibonacci using primitive Fix *)
Let fib = (Fix fib . n . If n = 0 Then 0 Else If n = 1 Then 1 Else (fib (n-1)) + (fib (n-2))) In 
fib 6

(* Church encoding of lists using pairs, and higher-order list functions (member and map) *)
Let nil = (0,0)
In
Let isnil = (Fun x . (Fst x) = 0)
In 
Let cons = (Fun x . Fun l . (1, (x, l)))
In 
Let head = (Fun l . (Fst(Snd l)))
In 
Let tail = (Fun l . (Snd(Snd l)))
In
Let member =  
    (Fix mem . x . (Fun l .
			If (isnil l) Then False Else
			If (head l) = x Then True Else
			(mem x) (tail l)))
In
Let map =
  (Fix m . f . Fun l .If (isnil l) Then l Else (cons (f (head l))) ((m f) (tail l)))
In
Let a = (cons 10) ((cons 2) ((cons 3) nil))
In
((member 4) a, (member 4) ((map (Fun x . x + 2)) a))
